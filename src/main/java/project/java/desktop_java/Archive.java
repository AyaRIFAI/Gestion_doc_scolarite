/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project.java.desktop_java;
import java.sql.PreparedStatement;
import java.sql.*;

import java.awt.event.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
/**
 *
 * @author DELL
 */
public class Archive extends javax.swing.JFrame {
   String CNE = null;
    ResultSet rs = null;
    PreparedStatement ps = null;
     ResultSet rs2 = null;
    PreparedStatement ps2 = null;
    String choix1 = "";
    String choix2 = "";
    int f1=0;
    int f2=0;
    int f3=0;
    int f4=0; 
    /**
     * 
     * Creates new form Archive
     */
    public Archive() {
      initComponents();
      
       status_f1.addActionListener(new ActionListener() {     
     @Override
     public void actionPerformed(ActionEvent e) {
         //JOptionPane.showMessageDialog(null, "waa"+status_f1.getSelectedItem().toString());
         choix1=status_f1.getSelectedItem().toString();
     }
   });
      filter_f2.addActionListener(new ActionListener() {     
     @Override
     public void actionPerformed(ActionEvent e) {
  //JOptionPane.showMessageDialog(null, "waa"+filter_f2.getSelectedItem().toString());

         choix2=filter_f2.getSelectedItem().toString(); 
        
     }
   }); 
      //archive.setEnabled(false);
      archive.setDefaultEditor(Object.class, null);
      TableArchive();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        X = new java.awt.Button();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        X1 = new java.awt.Button();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel10 = new javax.swing.JPanel();
        cne = new javax.swing.JLabel();
        cne_filter = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        filter_f2 = new javax.swing.JComboBox<>();
        jProgressBar1 = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        date_f = new javax.swing.JFormattedTextField();
        filter = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        archive = new javax.swing.JTable();
        reset = new javax.swing.JButton();
        status_f1 = new javax.swing.JComboBox<>();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        retour = new javax.swing.JButton();
        menu = new javax.swing.JButton();
        deconnecter = new javax.swing.JButton();

        X.setLabel("X");
        X.setName("X"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setForeground(new java.awt.Color(255, 255, 255));

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        jLabel13.setFont(new java.awt.Font("Poppins ExtraBold", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 102, 102));
        jLabel13.setText("Archive Des Demandes Traités");

        X1.setBackground(new java.awt.Color(255, 102, 102));
        X1.setLabel("X");
        X1.setName("X"); // NOI18N
        X1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                X1ActionPerformed(evt);
            }
        });

        jSeparator5.setForeground(new java.awt.Color(0, 102, 102));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(X1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(X1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        cne.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        cne.setForeground(new java.awt.Color(0, 102, 102));
        cne.setText("CNE :");

        cne_filter.setBackground(new java.awt.Color(0, 102, 102));
        cne_filter.setForeground(new java.awt.Color(255, 255, 255));
        cne_filter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        cne_filter.setBorder(null);
        cne_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cne_filterActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 102, 102));
        jLabel16.setText("Status :");

        jLabel17.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 102, 102));
        jLabel17.setText("Date de la demande :");

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Doc Demandé :");

        filter_f2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        filter_f2.setForeground(new java.awt.Color(0, 102, 102));
        filter_f2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choisir", "Attestation scolarite", "Relevé de notes", "Convention stage" }));

        jSeparator1.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 102));
        jSeparator1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSeparator1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jSeparator2.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator2.setForeground(new java.awt.Color(0, 102, 102));
        jSeparator2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSeparator2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jSeparator3.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator3.setForeground(new java.awt.Color(0, 102, 102));
        jSeparator3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSeparator3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jSeparator4.setBackground(new java.awt.Color(0, 102, 102));
        jSeparator4.setForeground(new java.awt.Color(0, 102, 102));
        jSeparator4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jSeparator4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        date_f.setForeground(new java.awt.Color(0, 102, 102));
        try {
            date_f.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####-##-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        date_f.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        filter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        filter.setForeground(new java.awt.Color(0, 102, 102));
        filter.setText("Filtrer");
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setAutoscrolls(true);

        archive.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        archive.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        archive.setForeground(new java.awt.Color(0, 102, 102));
        archive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CNE", "Prénom", "Nom", "Email", "Document demandé", "Status", "Date demande"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        archive.setGridColor(new java.awt.Color(0, 0, 0));
        archive.setSelectionBackground(new java.awt.Color(0, 153, 153));
        archive.getTableHeader().setResizingAllowed(false);
        archive.getTableHeader().setReorderingAllowed(false);
        archive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                archiveMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(archive);
        if (archive.getColumnModel().getColumnCount() > 0) {
            archive.getColumnModel().getColumn(0).setResizable(false);
            archive.getColumnModel().getColumn(1).setResizable(false);
            archive.getColumnModel().getColumn(2).setResizable(false);
            archive.getColumnModel().getColumn(3).setResizable(false);
            archive.getColumnModel().getColumn(4).setResizable(false);
            archive.getColumnModel().getColumn(5).setResizable(false);
            archive.getColumnModel().getColumn(6).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 948, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        reset.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        reset.setForeground(new java.awt.Color(0, 102, 102));
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        status_f1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        status_f1.setForeground(new java.awt.Color(0, 102, 102));
        status_f1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choisir", "Accepté", "Refusée" }));
        status_f1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                status_f1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cne_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(status_f1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(filter_f2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(filter))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(date_f, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(date_f, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(filter))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reset))
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(filter_f2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(status_f1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addComponent(jLabel17)
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(cne)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(cne_filter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        kGradientPanel1.setEndColor(new java.awt.Color(0, 51, 51));
        kGradientPanel1.setStartColor(new java.awt.Color(0, 102, 102));

        retour.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        retour.setForeground(new java.awt.Color(0, 102, 102));
        retour.setText("Retour");
        retour.setBorderPainted(false);
        retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retourActionPerformed(evt);
            }
        });

        menu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        menu.setForeground(new java.awt.Color(0, 102, 102));
        menu.setText("Menu");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        deconnecter.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deconnecter.setForeground(new java.awt.Color(0, 102, 102));
        deconnecter.setText("Se déconnecter");
        deconnecter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deconnecterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(deconnecter)
                    .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(retour, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(retour)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE)
                .addComponent(menu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deconnecter)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 1157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        // TODO add your handling code here:
        Demande_archive ar = new Demande_archive();
        ar.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_menuActionPerformed

    private void retourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retourActionPerformed
        // TODO add your handling code here:
        Demande_archive ar = new Demande_archive();
        ar.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_retourActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        // TODO add your handling code here:
        cne_filter.setText("");
     date_f.setText("");
     status_f1.setSelectedIndex(0);
     filter_f2.setSelectedIndex(0);
     TableArchive();
    }//GEN-LAST:event_resetActionPerformed

    private void archiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_archiveMouseClicked
        // TODO add your handling code here:
                try {
            

            int i = archive.getSelectedRow();

            TableModel tm =archive.getModel();

            CNE =tm.getValueAt(i, 0).toString();

            //************************************
            try {
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select id from gl_projet.etudiants where cne=?");
                ps.setString(1,CNE);
                rs = ps.executeQuery();
                int id=0;
                String type_demande,status;
                type_demande=tm.getValueAt(i, 4).toString();
                status = tm.getValueAt(i, 5).toString();
                if(rs.next()){
                    id = rs.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select id_demande,erreur from gl_projet.demande_docs where id_etudiant=? and type_demande=? and created_at=?");
                    ps.setInt(1,id);
                    ps.setString(2,type_demande);

                    ps.setString(3,tm.getValueAt(i, 6).toString());

                    rs = ps.executeQuery();
                    int id_demande;

                    if(rs.next()){
                        String erreur = rs.getString("erreur");
                        id_demande=rs.getInt("id_demande");
                        if(status.equals("refusée")){
                            demande_Erreur de = new demande_Erreur();
                            de.erreur(erreur);
                            de.setVisible(true);
                            this.dispose();
                        }
                        else{
                            if(type_demande.equals("convention stage")){
                                Convention a = new Convention(id_demande,id);
                                a.setVisible(true);
                                this.dispose();
                            }
                            else if(type_demande.equals("releve de notes")){
                                Releve a = new Releve(id_demande,id);
                                a.setVisible(true);
                                this.dispose();
                            }
                            else{
                                Attestation a = new Attestation(id_demande,id);
                                a.setVisible(true);
                                this.dispose();

                            }
                        }
                    }
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed **");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Choisir une column valide");
        }
    }//GEN-LAST:event_archiveMouseClicked

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        // TODO add your handling code here:
        if(!cne_filter.getText().equals("") && !cne_filter.getText().equals(" ")){
            // JOptionPane.showMessageDialog(null, "ccc !!! F1"+cne_filter.getText());

            f1=1;
        }
       // JOptionPane.showMessageDialog(null, "ccc F1!!!"+f1);
       
       
        if(!date_f.getText().equals("") && !date_f.getText().equals(" ")&& !date_f.getText().equals("    -  -  ") ){
            f4=1;
        }
    //JOptionPane.showMessageDialog(null, "ccc f4!!!"+f4);
  
        if( !choix1.equals("")&& !choix1.equals(" ") && !choix1.equals("Choisir")){
             //JOptionPane.showMessageDialog(null, "connect!!!"+choix1);

            f2=1;
        }
       // JOptionPane.showMessageDialog(null, "ccc  F2!!!"+f2);
        if( !choix2.equals("")&& !choix2.equals(" ") && !choix2.equals("Choisir")){
          

            f3=1;
        }
       // JOptionPane.showMessageDialog(null, "ccc F3!!!"+f3);
        
        
        //*************************CAS 1**********
        if(f1==1 && f2==0 && f3==0 && f4==0){
            // affichage
         // JOptionPane.showMessageDialog(null, "waa"+cne_filter.getText());

            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);
                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    rs = ps.executeQuery();

                    while(rs.next()){

                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }

                archive.setModel(model);
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 1!!!");
            }
        }

        // CAS 2
        else if(f1==0 && f2==1 && f3==0 && f4==0){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and status=?");
                ps.setString(1,"1");
                ps.setString(2,choix1);
                rs = ps.executeQuery();
     
                    while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                }
                archive.setModel(model);
                
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 2");
            }
        }

        // CAS 3
        else if(f1==0 && f2==0 && f3==1 && f4==0){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and type_demande=?");
                ps.setString(1,"1");
                ps.setString(2,choix2);
                rs = ps.executeQuery();
               
                      while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                }
                archive.setModel(model); 
                
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 3");
            }
        }
        // CAS 4
        else if(f1==0 && f2==0 && f3==0 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and created_at like ?");
                ps.setString(1,"1");
                ps.setString(2,date_f.getText()+"%");
                rs = ps.executeQuery();
                
                    while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                } 
                   archive.setModel(model);      
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 4");
            }
        }
        // CAS 5
        else if(f1==0 && f2==1 && f3==1 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and status=? and type_demande=? and created_at like ?");
                ps.setString(1,"1");
                ps.setString(2,choix1);
                ps.setString(3,choix2);
                ps.setString(4,date_f.getText()+"%");
                rs = ps.executeQuery();
                
                     while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                }
                archive.setModel(model);

                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 5");
            }
        }
        // CAS 6
        else if(f1==0 && f2==0 && f3==1 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and type_demande=? and created_at like ?");
                ps.setString(1,"1");
                ps.setString(2,choix2);
                ps.setString(3,date_f.getText()+"%");
                rs = ps.executeQuery();
                
                    while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                }
                archive.setModel(model);

                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 6");
            }
        }
        // CAS 7
        else if(f1==0 && f2==1 && f3==0 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and status=? and created_at like ?");
                ps.setString(1,"1");
                ps.setString(2,choix1);
                ps.setString(3,date_f.getText()+"%");
                rs = ps.executeQuery();
                
                    while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                }
                archive.setModel(model);
               
                
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 7");
            }
        }
        // CAS 8
        else if(f1==0 && f2==1 && f3==1 && f4==0){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and status=? and type_demande=?");
                ps.setString(1,"1");
                ps.setString(2,choix1);
                ps.setString(3,choix2);
                rs = ps.executeQuery();
             
                     while(rs.next()){
                    afficher[4]=rs.getString("type_demande");
                    afficher[5]=rs.getString("status");
                    afficher[6]=rs.getString("created_at");

                    int id_etud = rs.getInt("id_etudiant");

                    ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
                    ps2.setString(1, Integer.toString(id_etud));
                    rs2 = ps2.executeQuery();

                    if(rs2.next()){
                        afficher[0]=rs2.getString("cne");
                        // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");

                        afficher[3]=rs2.getString("email_etudiant");

                    }
                    model.addRow(afficher);
                }
                archive.setModel(model);
                
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 8");
            }
        }

        //*************************CAS 9**********
        if(f1==1 && f2==1 && f3==1 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);

                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=? and status=? and type_demande=? and created_at like ?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,choix1);
                    ps.setString(4,choix2);
                    ps.setString(5,date_f.getText()+"%");
                    rs = ps.executeQuery();
                     
                        while(rs.next()){

                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    }
                        archive.setModel(model);
                
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 9");
            }
        }
        
                
          //*************************CAS 10**********
        if(f1==1 && f2==0 && f3==1 && f4==0){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);

                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=?  and type_demande=?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,choix2); 
                    rs = ps.executeQuery();
                   
                       while(rs.next()){
                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");
                        model.addRow(afficher);
                    }
                     archive.setModel(model);

                   
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }

                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 10");
            }
        }
        //*************************CAS 11**********
        if(f1==1 && f2==1 && f3==0 && f4==0){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);
                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");
                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=? and status=?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,choix1);
                    rs = ps.executeQuery();
               //JOptionPane.showMessageDialog(null, "hi"+id_etud);

               // JOptionPane.showMessageDialog(null, ""+rs.getString("count(id)"));

          
                        while(rs.next()){
                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    }
                     archive.setModel(model);
                   
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }

                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 11");
            }
        }
        //*************************CAS 12**********
        if(f1==1 && f2==1 && f3==1 && f4==0){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);

                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=? and status=? and type_demande=?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,choix1);
                    ps.setString(4,choix2);
                    rs = ps.executeQuery();
                   
                         while(rs.next()){
                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    }
                     archive.setModel(model);
                   
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }

                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 13");
            }
        }
        //*************************CAS 13**********
        if(f1==1 && f2==0 && f3==1 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();
               

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);
                rs2 = ps2.executeQuery();
                 
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=? and type_demande=? and created_at like ?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,choix2);
                    ps.setString(4,date_f.getText()+"%");
                    //JOptionPane.showMessageDialog(null, "ZZZRRR");
                    rs = ps.executeQuery();
                   
                       while(rs.next()){

                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    }
                  
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }

                archive.setModel(model);
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 14");
            }
        }
        //*************************CAS 14**********
        if(f1==1 && f2==1 && f3==0 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);

                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=? and status=? and  created_at like ?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,choix1);
                    ps.setString(4,date_f.getText()+"%");
                    rs = ps.executeQuery();
                   
                      while(rs.next()){

                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    } 
                       archive.setModel(model);

                    
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }

                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed 15");
            }
        }
        //*************************CAS 15**********
        if(f1==1 && f2==0 && f3==0 && f4==1){
            // affichage
            String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
                "Status","Date Demande"};
            String afficher[] = new String[7];
            DefaultTableModel model = new DefaultTableModel(null,enregistrer);
            try{
                String cne_etud = cne_filter.getText();

                ps2 = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where cne=?");
                ps2.setString(1, cne_etud);

                rs2 = ps2.executeQuery();
                int id_etud=0;
                if(rs2.next()){
                    id_etud=rs2.getInt("id");

                    ps = (PreparedStatement) ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=? and id_etudiant=? and created_at like ?");
                    ps.setString(1,"1");
                    ps.setString(2,Integer.toString(id_etud));
                    ps.setString(3,date_f.getText()+"%");
                    rs = ps.executeQuery();
                   
                       while(rs.next()){

                        afficher[4]=rs.getString("type_demande");
                        afficher[5]=rs.getString("status");
                        afficher[6]=rs.getString("created_at");
                        afficher[0]=rs2.getString("cne");
                        afficher[1]=rs2.getString("prenom");
                        afficher[2]=rs2.getString("nom");
                        afficher[3]=rs2.getString("email_etudiant");

                        model.addRow(afficher);
                    }
                    archive.setModel(model);

                  
                    
                }
                else{
                    JOptionPane.showMessageDialog(null, " cet Etudiant avec ce cne n'existe pas!!!");

                }
                f1=0 ;f2=0; f3=0;f4=0;
            }catch (Exception e) {
                JOptionPane.showMessageDialog(null, "connection failed!!!");
            }

        }
        
    }
        /*
    }//GEN-LAST:event_filterActionPerformed

    private void cne_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cne_filterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cne_filterActionPerformed
*/
    private void deconnecterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deconnecterActionPerformed
        // TODO add your handling code here:
        LogAdmin menu = new LogAdmin();
        menu.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_deconnecterActionPerformed

    private void X1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_X1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_X1ActionPerformed

    private void status_f1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_status_f1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_status_f1ActionPerformed
          
          
    public void TableArchive(){
       String enregistrer [] = {"CNE","Prénom","Nom","Email","Document Demandé",
     "Status","Date Demande"};
     String afficher[] = new String[7];
     DefaultTableModel model = new DefaultTableModel(null,enregistrer);
     try{
          PreparedStatement ps;
          ps = ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.demande_docs where is_archive=?");
          ps.setString(1,"1");
          ResultSet rs = ps.executeQuery();
        while(rs.next()){
            afficher[4]=rs.getString("type_demande"); 
            afficher[5]=rs.getString("status");
            afficher[6]=rs.getString("created_at");
            int id_etud = rs.getInt("id_etudiant");
            
             PreparedStatement ps2 =  ConnectionDB.getConnexion().prepareStatement("select * from gl_projet.etudiants where id=?");
             ps2.setString(1, Integer.toString(id_etud));
             ResultSet rs2 = ps2.executeQuery();

             if(rs2.next()){
                afficher[0]=rs2.getString("cne");
               // JOptionPane.showMessageDialog(null, "marha!!!"+rs2.getString("nom"));
                afficher[1]=rs2.getString("prenom");
                afficher[2]=rs2.getString("nom"); 
                afficher[3]=rs2.getString("email_etudiant");   
             }
             model.addRow(afficher);
        }
        archive.setModel(model);
     }catch (Exception e) {
            JOptionPane.showMessageDialog(null, "connection failed!!!");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Archive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Archive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Archive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Archive.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Archive().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button X;
    private java.awt.Button X1;
    private javax.swing.JTable archive;
    private javax.swing.JLabel cne;
    private javax.swing.JTextField cne_filter;
    private javax.swing.JFormattedTextField date_f;
    private javax.swing.JButton deconnecter;
    private javax.swing.JButton filter;
    private javax.swing.JComboBox<String> filter_f2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JButton menu;
    private javax.swing.JButton reset;
    private javax.swing.JButton retour;
    private javax.swing.JComboBox<String> status_f1;
    // End of variables declaration//GEN-END:variables

}
